name: Auto Translate Chinese (S2T) & Sync Upstream

on:
  workflow_dispatch: # Allows manual triggering from the Actions tab
  schedule:
    # Runs, for example, every day at 3 AM UTC. Adjust as needed.
    # Use https://crontab.guru to help define your cron schedule.
    - cron: '0 3 * * *'
  push:
    branches:
      - main # Or your fork's default branch (e.g., master)

permissions:
  contents: write # Necessary to commit and push changes to your fork

jobs:
  translate_and_sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Fork
        uses: actions/checkout@v4
        with:
          # Checkout your fork. We need full history for merging.
          fetch-depth: 0
          # If your script is in your fork, it will be checked out here.
          # Use a Personal Access Token (PAT) if you need to push to a protected branch
          # or if the default GITHUB_TOKEN doesn't have enough permissions for some reason.
          # token: ${{ secrets.YOUR_PAT_WITH_REPO_WRITE_ACCESS }}


      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Specify your desired Python version

      - name: Install dependencies
        run: pip install opencc-python-reimplemented

      - name: Configure Git User
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Add upstream remote and fetch
        # Replace <URL_OF_ORIGINAL_UPSTREAM_REPO> with the actual HTTPS URL of the repository you forked
        # e.g., https://github.com/original-owner/original-repo.git
        run: |
          git remote add upstream https://github.com/LocalizeLimbusCompany/LocalizeLimbusCompany
          git fetch upstream

      - name: Merge changes from upstream
        # Replace 'main' with the default branch of the upstream repo if it's different
        # This merges upstream's main into your fork's current branch (e.g., main)
        run: |
          # Ensure you are on the correct branch in your fork
          git checkout main # Or your fork's default branch
          # Attempt to merge. If there are conflicts, the workflow will fail here,
          # which is often desired so you can resolve them manually.
          # --no-commit and --no-ff can be used if you want to combine upstream changes
          # with translation changes into a single commit later.
          # For simplicity, this example tries a direct merge.
          git merge upstream/main -m "Merge upstream changes" || echo "Merge failed or no new changes from upstream."
        # If the merge fails due to conflicts, the script will stop.
        # You can add 'continue-on-error: true' if you want to proceed even if merge fails,
        # but that's generally not recommended without careful conflict handling.

      - name: Run Translation Script
        # Assumes your script is named 'translate_limbus_github.py' and is in the root.
        # The '.' tells the script to process the current directory (the repo root).
        run: python translate_limbus_github.py .


      - name: Commit and push changes
        id: commit_push # Give an ID to this step for output referencing
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit after translation and sync."
            echo "changes_committed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, committing and pushing..."
            COMMIT_MSG="Automated S2T translation & upstream sync ($(date +'%Y-%m-%d %H:%M:%S UTC'))"
            git commit -m "$COMMIT_MSG"
            
            # Retry push operation up to 3 times with a delay
            for i in 1 2 3; do
              if git push; then
                echo "Push successful on attempt $i."
                break
              fi
              if [ $i -lt 3 ]; then
                echo "Push attempt $i failed, retrying in 15s..."
                sleep 15
              else
                echo "Push failed after $i attempts."
                exit 1 # Exit with error if push fails after all retries
              fi
            done
            echo "changes_committed=true" >> $GITHUB_OUTPUT
          fi

      - name: Install zip utility
        if: steps.commit_push.outputs.changes_committed == 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip

      - name: Archive the folder for release
        id: archive_folder # Give an ID to this step
        if: steps.commit_push.outputs.changes_committed == 'true'
        run: |
          FOLDER_TO_ARCHIVE="LimbusCompany_Data/Lang/LLC_zh-CN"
          # This is the name of the ZIP file that will be created and uploaded
          DESIRED_ZIP_NAME="LimbusCompany_Data.zip" 
          
          if [ -d "$FOLDER_TO_ARCHIVE" ]; then
            # The command below will create a zip file named LimbusCompany_Data.zip.
            # Inside this zip file, there will be a folder named LLC_zh-CN containing all its original content.
            zip -r "$DESIRED_ZIP_NAME" "$FOLDER_TO_ARCHIVE"
            echo "Successfully created $DESIRED_ZIP_NAME from $FOLDER_TO_ARCHIVE"
            echo "archive_path=$DESIRED_ZIP_NAME" >> $GITHUB_OUTPUT # Set output for the path of the archive
            echo "archive_created=true" >> $GITHUB_OUTPUT          # Set output to indicate archive creation
          else
            echo "Warning: Folder $FOLDER_TO_ARCHIVE not found. No archive will be created for it."
            echo "archive_created=false" >> $GITHUB_OUTPUT
            # If LLC_zh-CN is mandatory for a release, you might want to fail the job here:
            # exit 1 
          fi

      - name: Create Release and Upload Asset
        # This step only runs if changes were committed AND the specific archive was successfully created.
        if: steps.commit_push.outputs.changes_committed == 'true' && steps.archive_folder.outputs.archive_created == 'true'
        uses: softprops/action-gh-release@v2 # Using v2 of the action
        with:
          # Creates a unique tag for each run to ensure a new release is made.
          # Example: translation-run-1234567
          tag_name: translation-run-${{ github.run_id }}
          name: "Automated Translation Release (Run ${{ github.run_id }})"
          body: |
            Automated Simplified to Traditional Chinese translation update.
            This release includes the latest translations and synced changes from the upstream repository.
            
            The folder 'LLC_zh-CN' from the repository has been packaged into the asset below, named '${{ steps.archive_folder.outputs.archive_path }}'.
          files: ${{ steps.archive_folder.outputs.archive_path }} # Path to the LimbusCompany_Data.zip
          # draft: false # Default - publishes the release immediately
          # prerelease: false # Default - marks as a full production release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub

